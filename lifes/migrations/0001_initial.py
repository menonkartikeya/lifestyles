# Generated by Django 3.2.2 on 2021-05-11 10:09

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='bills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoicepdf', models.FileField(upload_to='')),
                ('name', models.CharField(max_length=100)),
                ('price', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('mobno', models.IntegerField(default=0)),
                ('bookcall', models.BooleanField(blank=True, null=True)),
                ('bookapp', models.BooleanField(blank=True, null=True)),
                ('message', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='food',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pic', models.ImageField(upload_to='')),
                ('stuff', models.CharField(max_length=1000)),
                ('calories', models.IntegerField(default=0)),
                ('protein', models.IntegerField(default=0)),
                ('fat', models.IntegerField(default=0)),
                ('carbs', models.IntegerField(default=0)),
                ('fiber', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='live',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slottime', models.TimeField()),
                ('date', models.DateField()),
                ('link', models.URLField()),
            ],
        ),
        migrations.CreateModel(
            name='logs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=100)),
                ('answer', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='subplans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan', models.CharField(choices=[('Free Plan', 'Free Plan'), ('Basic Plan', 'Basic Plan'), ('Premium Plan', 'Premium Plan')], max_length=100)),
                ('price', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='foodplan',
            fields=[
                ('video', models.URLField()),
                ('textrecipe', models.CharField(max_length=1000)),
                ('fooditem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='lifes.food')),
            ],
        ),
        migrations.CreateModel(
            name='dietplan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remarks', models.CharField(blank=True, max_length=1000, null=True)),
                ('breakfast', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Breakfast', to='lifes.food')),
                ('dinner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Dinner', to='lifes.food')),
                ('lunch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Lunch', to='lifes.food')),
                ('snacks', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Snacks', to='lifes.food')),
            ],
        ),
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Prefer not to say', 'Prefer not to say')], max_length=50)),
                ('mobno', models.IntegerField(default=0)),
                ('height', models.CharField(max_length=70)),
                ('weight', models.CharField(max_length=70)),
                ('target', models.CharField(choices=[('Gain Weight', 'Gain Weight'), ('Stay Fit', 'Stay Fit'), ('Loose Weight', 'Loose Weight')], max_length=60)),
                ('playlist', models.URLField(blank=True, null=True)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('bill', models.ManyToManyField(to='lifes.bills')),
                ('diets', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lifes.dietplan')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('lives', models.ManyToManyField(to='lifes.live')),
                ('log', models.ManyToManyField(to='lifes.logs')),
                ('subscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lifes.subplans')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('foodplans', models.ManyToManyField(to='lifes.foodplan')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='grocerylist',
            fields=[
                ('id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='lifes.myuser')),
                ('items', models.CharField(max_length=1000)),
                ('totprice', models.IntegerField()),
                ('address', models.CharField(max_length=500)),
                ('billitem', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='lifes.bills')),
            ],
        ),
        migrations.CreateModel(
            name='employeecontrol',
            fields=[
                ('id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='lifes.myuser')),
                ('mobno', models.IntegerField()),
                ('employeetype', models.CharField(choices=[('Nutritionist', 'Nutritionist'), ('Dietician', 'Dietician'), ('employee', 'employee')], max_length=100)),
                ('certificate', models.URLField()),
                ('resume', models.URLField()),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Prefer not to say', 'Prefer not to say')], max_length=50)),
                ('alloted', models.ManyToManyField(blank=True, related_name='Alloted_Users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
